// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require foundation
//= require ckeditor/init
//= require photoswipe
//= require slick
//= require Sortable.min
//= require jquery.collagePlus.min
//= require_tree .

var ready = function(){
  // Foundation options
  $(document).foundation({
    topbar: {
      sticky_class : 'sticky',
      custom_back_text: false, // Set this to false and it will pull the top level link name as the back text
      is_hover: true,
      mobile_show_parent_link: false, // will copy parent links into dropdowns for mobile navigation
      scrolltop : false // jump to top when sticky nav menu toggle is clicked
    },
    abide : {
      patterns: {
        advanced_email: /^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i,
        length500: /^.{1,500}$/gm
      }
    }
  });

  // Image protection script
  // $(function() {
  //     var pixelSource = "<%= asset_path('transparent.gif') %>";
  //     var useOnAllImages = true;
  //     // Preload the pixel
  //     var preload = new Image();
  //     preload.src = pixelSource;
  //     $('.protect img').on('mouseenter touchstart', function(e) {
  //         // Only execute if this is not an overlay or skipped
  //         var img = $(this);
  //         if (img.hasClass('protectionOverlay')) return;
  //         if (!useOnAllImages && !img.hasClass('protectMe')) return;
  //         // Get the real image's position, add an overlay
  //         var pos = img.offset();
  //         var overlay = $('<img class="protectionOverlay" src="' + pixelSource + '" />').css({width: img.width() + 'px', height: img.height() + 'px'}).css({position: 'absolute', zIndex: 9999999, left: pos.left, top: pos.top}).appendTo('body').bind('mouseleave', function() {
  //             setTimeout(function(){ overlay.remove(); }, 0, $(this));
  //         });
  //         if ('ontouchstart' in window) $(document).one('touchend', function(){ setTimeout(function(){ overlay.remove(); }, 0, overlay); });
  //     });
  // });

  //Slick
  $('.fade').slick({
    autoplay:       true,
    autoplaySpeed:  3000,
    mobileFirst:    true,
    infinite:       true,
    speed:          700,
    fade:           true,
    arrows:         false,
    cssEase:        'linear',
    pauseOnHover:   false
  });

  //Photo Swipe
  var initPhotoSwipeFromDOM = function(gallerySelector) {

      // parse slide data (url, title, size ...) from DOM elements
      // (children of gallerySelector)
      var parseThumbnailElements = function(el) {
          var thumbElements = el.childNodes,
              numNodes = thumbElements.length,
              items = [],
              figureEl,
              linkEl,
              size,
              item;

          for(var i = 0; i < numNodes; i++) {

              figureEl = thumbElements[i]; // <figure> element

              // include only element nodes
              if(figureEl.nodeType !== 1) {
                  continue;
              }

              linkEl = figureEl.children[0]; // <a> element

              size = linkEl.getAttribute('data-size').split('x');

              // create slide object
              item = {
                  src: linkEl.getAttribute('href'),
                  w: parseInt(size[0], 10),
                  h: parseInt(size[1], 10)
              };



              if(figureEl.children.length > 1) {
                  // <figcaption> content
                  item.title = figureEl.children[1].innerHTML;
              }

              if(linkEl.children.length > 0) {
                  // <img> thumbnail element, retrieving thumbnail url
                  item.msrc = linkEl.children[0].getAttribute('src');
              }

              item.el = figureEl; // save link to element for getThumbBoundsFn
              items.push(item);
          }

          return items;
      };

      // find nearest parent element
      var closest = function closest(el, fn) {
          return el && ( fn(el) ? el : closest(el.parentNode, fn) );
      };

      // triggers when user clicks on thumbnail
      var onThumbnailsClick = function(e) {
          e = e || window.event;
          e.preventDefault ? e.preventDefault() : e.returnValue = false;

          var eTarget = e.target || e.srcElement;

          // find root element of slide
          var clickedListItem = closest(eTarget, function(el) {
              return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');
          });

          if(!clickedListItem) {
              return;
          }

          // find index of clicked item by looping through all child nodes
          // alternatively, you may define index via data- attribute
          var clickedGallery = clickedListItem.parentNode,
              childNodes = clickedListItem.parentNode.childNodes,
              numChildNodes = childNodes.length,
              nodeIndex = 0,
              index;

          for (var i = 0; i < numChildNodes; i++) {
              if(childNodes[i].nodeType !== 1) {
                  continue;
              }

              if(childNodes[i] === clickedListItem) {
                  index = nodeIndex;
                  break;
              }
              nodeIndex++;
          }



          if(index >= 0) {
              // open PhotoSwipe if valid index found
              openPhotoSwipe( index, clickedGallery );
          }
          return false;
      };

      // parse picture index and gallery index from URL (#&pid=1&gid=2)
      var photoswipeParseHash = function() {
          var hash = window.location.hash.substring(1),
          params = {};

          if(hash.length < 5) {
              return params;
          }

          var vars = hash.split('&');
          for (var i = 0; i < vars.length; i++) {
              if(!vars[i]) {
                  continue;
              }
              var pair = vars[i].split('=');
              if(pair.length < 2) {
                  continue;
              }
              params[pair[0]] = pair[1];
          }

          if(params.gid) {
              params.gid = parseInt(params.gid, 10);
          }

          return params;
      };

      var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {
          var pswpElement = document.querySelectorAll('.pswp')[0],
              gallery,
              options,
              items;

          items = parseThumbnailElements(galleryElement);

          // define options (if needed)
          options = {
              // define gallery index (for URL)
              galleryUID: galleryElement.getAttribute('data-pswp-uid'),
              getThumbBoundsFn: function(index) {
                  // See Options -> getThumbBoundsFn section of documentation for more info
                  var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
                      pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
                      rect = thumbnail.getBoundingClientRect();

                  return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};
              },
              shareButtons: [
                  {id:'facebook', label:'Share on Facebook', url:'https://www.facebook.com/sharer/sharer.php?u={{url}}'},
                  {id:'twitter', label:'Tweet', url:'https://twitter.com/intent/tweet?text={{text}}&url={{url}}'},
                  {id:'pinterest', label:'Pin it', url:'http://www.pinterest.com/pin/create/button/?url={{url}}&media={{image_url}}&description={{text}}'}
              ],
              bgOpacity: 0.75
          };

          // PhotoSwipe opened from URL
          if(fromURL) {
              if(options.galleryPIDs) {
                  // parse real index when custom PIDs are used
                  // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
                  for(var j = 0; j < items.length; j++) {
                      if(items[j].pid == index) {
                          options.index = j;
                          break;
                      }
                  }
              } else {
                  // in URL indexes start from 1
                  options.index = parseInt(index, 10) - 1;
              }
          } else {
              options.index = parseInt(index, 10);
          }

          // exit if index not found
          if( isNaN(options.index) ) {
              return;
          }

          if(disableAnimation) {
              options.showAnimationDuration = 0;
          }

          // Pass data to PhotoSwipe and initialize it
          gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
          gallery.init();

          gallery.listen('destroy', function() {
            collage
          });

          gallery.listen('close', function() {
            var index = gallery.getCurrentIndex();
            $('.fade').slick('slickGoTo', index)
          });
      };

      // loop through all gallery elements and bind events
      var galleryElements = document.querySelectorAll( gallerySelector );

      for(var i = 0, l = galleryElements.length; i < l; i++) {
          galleryElements[i].setAttribute('data-pswp-uid', i+1);
          galleryElements[i].onclick = onThumbnailsClick;
      }

      // Parse URL and open gallery if it contains #&pid=3&gid=1
      var hashData = photoswipeParseHash();
      if(hashData.pid && hashData.gid) {
          openPhotoSwipe( hashData.pid ,  galleryElements[ hashData.gid - 1 ], true, true );
      }
  };

  // execute above function
  initPhotoSwipeFromDOM('.my-gallery');

  // Scroll to top button
  var offset = 300,
  //browser window scroll (in pixels) after which the "back to top" link opacity is reduced
  offset_opacity = 1200,
  //duration of the top scrolling animation (in ms)
  scroll_top_duration = 700,
  //grab the "back to top" link
  $back_to_top = $('.cd-top');

  //hide or show the "back to top" link
  $(window).scroll(function(){
    ( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out');
    if( $(this).scrollTop() > offset_opacity ) {
      $back_to_top.addClass('cd-fade-out');
    }
  });

  //smooth scroll to top
  $back_to_top.on('click', function(event){
    event.preventDefault();
    $('body,html').animate({
      scrollTop: 0 ,
      }, scroll_top_duration
    );
  });

  var collage, el, resizeTimer, sortable, targetItem;

  $('.pswp').bind('contextmenu', function(e) {
    return false;
  });

  el = $('.sortable')[0];

  targetItem = void 0;

  sortable = Sortable.create(el, {
    disabled: true,
    animation: 500,
    onMove: function(evt) {
      targetItem = evt.related;
    },
    onEnd: function(evt) {
      $.ajax({
        url: '/artworks/change_position',
        type: 'GET',
        data: {
          old_index: evt.item.getAttribute('data-pos'),
          new_index: targetItem.getAttribute('data-pos')
        },
        success: collage
      });
    }
  });

  $(".switch label").on('click', function(e) {
    var state;
    state = sortable.option('disabled');
    sortable.option('disabled', !state);
  });


  collage = function() {
    $('.sortable').collagePlus({
      'targetHeight': 206,
      'allowPartialLastRow': true,
      'fadeSpeed': 1000
      // 'effect': 'effect-1'
    });
  };

  $(window).load(function () {
    collage();
  });

  resizeTimer = null;

  $(window).bind('resize', function() {
    if (resizeTimer) {
      clearTimeout(resizeTimer);
    }
    resizeTimer = setTimeout(collage, 200);
  });

  // Sticky footer

  window.onload = function() {
    stickyFooter();

    //you can either uncomment and allow the setInterval to auto correct the footer
    //or call stickyFooter() if you have major DOM changes
    setInterval(checkForDOMChange, 1000);
  };

  //check for changes to the DOM
  function checkForDOMChange() {
    stickyFooter();
  }

  //check for resize event if not IE 9 or greater
  window.onresize = function() {
    stickyFooter();
  }

  //lets get the marginTop for the <footer>
  function getCSS(element, property) {

    var elem = document.getElementsByTagName(element)[0];
    var css = null;

    if (elem.currentStyle) {
      css = elem.currentStyle[property];

    } else if (window.getComputedStyle) {
    css = document.defaultView.getComputedStyle(elem, null).
    getPropertyValue(property);
    }

    return css;

  }

  function stickyFooter() {

    if (document.getElementsByTagName("footer")[0].getAttribute("style") != null) {
      document.getElementsByTagName("footer")[0].removeAttribute("style");
    }

    if (window.innerHeight != document.body.offsetHeight) {
      var offset = window.innerHeight - document.body.offsetHeight;
      var current = getCSS("footer", "margin-top");

      if (isNaN(current) == true) {
        document.getElementsByTagName("footer")[0].setAttribute("style","margin-top:0px;");
        current = 0;
      } else {
        current = parseInt(current);
      }

      if (current+offset > parseInt(getCSS("footer", "margin-top"))) {
        document.getElementsByTagName("footer")[0].setAttribute("style","margin-top:"+(current+offset)+"px;");
      }
    }
  }

  /*
  ! end sticky footer
  */
};

$(document).ready(ready)
$(document).on('page:load', ready)